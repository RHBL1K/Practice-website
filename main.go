package main

import (
	"context"
	"fmt"
	"log"
	"net/http"
	"net/smtp"
	"time"


	"go.mongodb.org/mongo-driver/mongo"
	"go.mongodb.org/mongo-driver/mongo/options"
)


const (
	SMTPServer      = "smtp.gmail.com"
	SMTPPort        = "587"
	SenderEmail     = ""
		// –ù—É–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å –ø–æ—á—Ç—É –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
	SenderPassword  = ""
		// –ù—É–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å –ø–∞—Ä–æ–ª—å –æ—Ç –ø–æ—á—Ç—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
	ReceiverEmail   = ""
		// –ù—É–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å –ø–æ—á—Ç—É –ø–æ–ª—É—á–∞—Ç–µ–ª—è
	MongoDBURI      = "mongodb+srv://Aldiyar:Nursultan2005@cluster0.8jzkf.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0"
	DatabaseName    = "contactFormDB"
	CollectionName  = "messages"
)


type FormData struct {
	Name    string `bson:"name"`
	Phone   string `bson:"phone"`
	Message string `bson:"message"`
	Time    string `bson:"time"`
}


func connectMongoDB() (*mongo.Client, error) {
	clientOptions := options.Client().ApplyURI(MongoDBURI)
	client, err := mongo.Connect(context.TODO(), clientOptions)
	if err != nil {
		return nil, err
	}

	
	err = client.Ping(context.TODO(), nil)
	if err != nil {
		return nil, err
	}

	fmt.Println(" –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB")
	return client, nil
}

func main() {
	
	client, err := connectMongoDB()
	if err != nil {
		log.Fatal("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB:", err)
	}
	defer client.Disconnect(context.TODO())


	collection := client.Database(DatabaseName).Collection(CollectionName)

	// –û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏–∫–∏
	fs := http.FileServer(http.Dir("static"))
	http.Handle("/", fs)

	// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ä–º—ã
	http.HandleFunc("/submit", func(w http.ResponseWriter, r *http.Request) {
		handleFormSubmission(w, r, collection)
	})

	fmt.Println("üåç –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:8080")
	log.Fatal(http.ListenAndServe(":8080", nil))
}

func handleFormSubmission(w http.ResponseWriter, r *http.Request, collection *mongo.Collection) {
	if r.Method != http.MethodPost {
		http.Error(w, "–ú–µ—Ç–æ–¥ –∑–∞–ø—Ä–µ—â–µ–Ω", http.StatusMethodNotAllowed)
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–æ—Ä–º—ã
	name := r.FormValue("name")
	phone := r.FormValue("phone")
	message := r.FormValue("message")
	currentTime := time.Now().Format("2006-01-02 15:04:05")

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ MongoDB
	formData := FormData{
		Name:    name,
		Phone:   phone,
		Message: message,
		Time:    currentTime,
	}

	_, err := collection.InsertOne(context.TODO(), formData)
	if err != nil {
		log.Println("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ MongoDB:", err)
		http.Error(w, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö", http.StatusInternalServerError)
		return
	}

	fmt.Println(" –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ MongoDB")

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∏—Å—å–º–æ
	emailBody := fmt.Sprintf("–ò–º—è: %s\n–¢–µ–ª–µ—Ñ–æ–Ω: %s\n–°–æ–æ–±—â–µ–Ω–∏–µ:\n%s\n–í—Ä–µ–º—è: %s", name, phone, message, currentTime)
	auth := smtp.PlainAuth("", SenderEmail, SenderPassword, SMTPServer)

	err = smtp.SendMail(SMTPServer+":"+SMTPPort, auth, SenderEmail, []string{ReceiverEmail}, []byte("Subject: –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å–∞–π—Ç–∞\n\n"+emailBody))
	if err != nil {
		log.Println("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ—á—Ç—ã:", err)
		http.Error(w, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è", http.StatusInternalServerError)
		return
	}

	fmt.Fprintln(w, "–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –±–∞–∑–µ!")
}
